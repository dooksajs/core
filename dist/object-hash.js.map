{"version":3,"file":"object-hash.js","sources":["../lib/main.js"],"sourcesContent":["const TYPES = {\n  Object,\n  Array,\n  Number,\n  Boolean,\n  String\n}\n\n/** @module objectHash */\nconst objectHash = {\n  /**\n   * Create Adler 32 hex string from object\n   * @param {Object} source - The original object used to create the hash\n   * @returns {string} - Adler 32 hex string\n   */\n  process (source) {\n    try {\n      const target = {}\n\n      this._sortType(target, source)\n\n      const encoder = new TextEncoder()\n      const string = JSON.stringify(target)\n      const buffer = encoder.encode(string)\n\n      return this._adler(buffer)\n    } catch (e) {\n      console.error(e)\n    }\n  },\n  _defaultType (value) {\n    const name = value.constructor.name\n\n    return TYPES[name]()\n  },\n  _adler (value) {\n    const MOD_ADLER = 65521\n    let a = 1\n    let b = 0\n    value = new Uint8Array(value)\n\n    for (let i = 0; i < value.length; i++) {\n      a += value[i]\n      b += a\n    }\n\n    a %= MOD_ADLER\n    b %= MOD_ADLER\n\n    return this._hex(((b << 16) | a) >>> 0, 8)\n  },\n  /**\n   * Translates a character into an ordinal.\n   *\n   * @param {char} c\n   * @returns {number}\n   *\n   * @example\n   * // returns 97\n   * this._.ord('a');\n   */\n  _ord (c) {\n    // Detect astral symbols\n    // Thanks to @mathiasbynens for this solution\n    // https://mathiasbynens.be/notes/javascript-unicode\n    if (c.length === 2) {\n      const high = c.charCodeAt(0)\n      const low = c.charCodeAt(1)\n\n      if (high >= 0xd800 && high < 0xdc00 &&\n          low >= 0xdc00 && low < 0xe000) {\n        return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000\n      }\n    }\n\n    return c.charCodeAt(0)\n  },\n  /**\n   * Converts a character or number to its hex representation.\n   *\n   * @param {char|number} c\n   * @param {number} [length=2] - The width of the resulting hex number.\n   * @returns {string}\n   *\n   * @example\n   * // returns \"6e\"\n   * this._hex(\"n\")\n   *\n   * // returns \"6e\"\n   * this._hex(110)\n   */\n  _hex (c, length = 2) {\n    c = typeof c === 'string' ? this._ord(c) : c\n    return c.toString(16).padStart(length, '0')\n  },\n  /**\n   * Sort source by data type\n   * @private\n   * @param {Object} target - Alphanumerically sorted object\n   * @param {*} source - Current value\n   * @returns\n   */\n  _sortType (target, source) {\n    if (this._nullish(source)) {\n      throw new Error('objectHash: value cannot be undefined')\n    }\n\n    if (Array.isArray(source)) {\n      source = this._array(target, source)\n    } else if (typeof source === 'object') {\n      source = this._object(target, source)\n    } else if (typeof source === 'function') {\n      source = source.toString()\n    }\n\n    return source\n  },\n  /**\n   * Check if value is undefined or null\n   * @private\n   * @param {*} value - Any value\n   * @returns {boolean}\n   */\n  _nullish (value) {\n    return (value === undefined || value === null)\n  },\n  /**\n   * Sort array alphanumerically\n   * @param {Object} target - Alphanumerically sorted object\n   * @param {Array} source - Current nested array\n   * @returns {Array}\n   */\n  _array (target, source) {\n    // make a copy\n    source = source.slice()\n    // sort\n    source.sort()\n\n    for (let i = 0; i < source.length; i++) {\n      const value = source[i]\n\n      source[i] = this._sortType(target, value)\n    }\n\n    return source\n  },\n  /**\n   * Sort object keys alphanumerically\n   * @private\n   * @param {Object} target - Alphanumerically sorted object\n   * @param {Object} source - Current nested object\n   * @returns {Object}\n   */\n  _object (target, source) {\n    const keys = Object.keys(source)\n\n    keys.sort()\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n\n      target[key] = this._defaultType(source[key])\n      target[key] = this._sortType(target[key], source[key])\n    }\n\n    return target\n  }\n}\n\nexport default objectHash\n"],"names":["TYPES","objectHash","source","target","encoder","string","buffer","e","value","name","a","b","i","c","high","low","length","keys","key"],"mappings":"AAAA,MAAMA,IAAQ;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAGMC,IAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMjB,QAASC,GAAQ;AACf,QAAI;AACF,YAAMC,IAAS,CAAE;AAEjB,WAAK,UAAUA,GAAQD,CAAM;AAE7B,YAAME,IAAU,IAAI,YAAa,GAC3BC,IAAS,KAAK,UAAUF,CAAM,GAC9BG,IAASF,EAAQ,OAAOC,CAAM;AAEpC,aAAO,KAAK,OAAOC,CAAM;AAAA,IAC1B,SAAQC,GAAP;AACA,cAAQ,MAAMA,CAAC;AAAA,IAChB;AAAA,EACF;AAAA,EACD,aAAcC,GAAO;AACnB,UAAMC,IAAOD,EAAM,YAAY;AAE/B,WAAOR,EAAMS,CAAI,EAAG;AAAA,EACrB;AAAA,EACD,OAAQD,GAAO;AAEb,QAAIE,IAAI,GACJC,IAAI;AACR,IAAAH,IAAQ,IAAI,WAAWA,CAAK;AAE5B,aAASI,IAAI,GAAGA,IAAIJ,EAAM,QAAQI;AAChC,MAAAF,KAAKF,EAAMI,CAAC,GACZD,KAAKD;AAGP,WAAAA,KAAK,OACLC,KAAK,OAEE,KAAK,MAAOA,KAAK,KAAMD,OAAO,GAAG,CAAC;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWD,KAAMG,GAAG;AAIP,QAAIA,EAAE,WAAW,GAAG;AAClB,YAAMC,IAAOD,EAAE,WAAW,CAAC,GACrBE,IAAMF,EAAE,WAAW,CAAC;AAE1B,UAAIC,KAAQ,SAAUA,IAAO,SACzBC,KAAO,SAAUA,IAAM;AACzB,gBAAQD,IAAO,SAAU,OAAQC,IAAM,QAAS;AAAA;AAIpD,WAAOF,EAAE,WAAW,CAAC;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeD,KAAMA,GAAGG,IAAS,GAAG;AACnB,WAAAH,IAAI,OAAOA,KAAM,WAAW,KAAK,KAAKA,CAAC,IAAIA,GACpCA,EAAE,SAAS,EAAE,EAAE,SAASG,GAAQ,GAAG;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,UAAWb,GAAQD,GAAQ;AACzB,QAAI,KAAK,SAASA,CAAM;AACtB,YAAM,IAAI,MAAM,uCAAuC;AAGzD,WAAI,MAAM,QAAQA,CAAM,IACtBA,IAAS,KAAK,OAAOC,GAAQD,CAAM,IAC1B,OAAOA,KAAW,WAC3BA,IAAS,KAAK,QAAQC,GAAQD,CAAM,IAC3B,OAAOA,KAAW,eAC3BA,IAASA,EAAO,SAAU,IAGrBA;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,SAAUM,GAAO;AACf,WAA+BA,KAAU;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,OAAQL,GAAQD,GAAQ;AAEtB,IAAAA,IAASA,EAAO,MAAO,GAEvBA,EAAO,KAAM;AAEb,aAASU,IAAI,GAAGA,IAAIV,EAAO,QAAQU,KAAK;AACtC,YAAMJ,IAAQN,EAAOU,CAAC;AAEtB,MAAAV,EAAOU,CAAC,IAAI,KAAK,UAAUT,GAAQK,CAAK;AAAA;AAG1C,WAAON;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,QAASC,GAAQD,GAAQ;AACvB,UAAMe,IAAO,OAAO,KAAKf,CAAM;AAE/B,IAAAe,EAAK,KAAM;AAEX,aAASL,IAAI,GAAGA,IAAIK,EAAK,QAAQL,KAAK;AACpC,YAAMM,IAAMD,EAAKL,CAAC;AAElB,MAAAT,EAAOe,CAAG,IAAI,KAAK,aAAahB,EAAOgB,CAAG,CAAC,GAC3Cf,EAAOe,CAAG,IAAI,KAAK,UAAUf,EAAOe,CAAG,GAAGhB,EAAOgB,CAAG,CAAC;AAAA;AAGvD,WAAOf;AAAA,EACR;AACH;"}