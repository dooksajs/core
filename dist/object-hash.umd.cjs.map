{"version":3,"file":"object-hash.umd.cjs","sources":["../../crypto/dist/crypto.js","../lib/main.js"],"sourcesContent":["const u = (n) => {\n  let o = 1, r = 0;\n  n = new Uint8Array(n);\n  for (let d = 0; d < n.length; d++)\n    o += n[d], r += o;\n  return o %= 65521, r %= 65521, s((r << 16 | o) >>> 0, 8);\n}, g = (n) => {\n  if (n.length === 2) {\n    const t = n.charCodeAt(0), o = n.charCodeAt(1);\n    if (t >= 55296 && t < 56320 && o >= 56320 && o < 57344)\n      return (t - 55296) * 1024 + o - 56320 + 65536;\n  }\n  return n.charCodeAt(0);\n}, s = (n, t = 2) => (n = typeof n == \"string\" ? g(n) : n, n.toString(16).padStart(t, \"0\"));\nlet c;\nconst x = new Uint8Array(16);\nfunction y() {\n  if (!c && (c = typeof crypto < \"u\" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !c))\n    throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n  return c(x);\n}\nconst e = [];\nfor (let n = 0; n < 256; ++n)\n  e.push((n + 256).toString(16).slice(1));\nfunction p(n, t = 0) {\n  return (e[n[t + 0]] + e[n[t + 1]] + e[n[t + 2]] + e[n[t + 3]] + \"-\" + e[n[t + 4]] + e[n[t + 5]] + \"-\" + e[n[t + 6]] + e[n[t + 7]] + \"-\" + e[n[t + 8]] + e[n[t + 9]] + \"-\" + e[n[t + 10]] + e[n[t + 11]] + e[n[t + 12]] + e[n[t + 13]] + e[n[t + 14]] + e[n[t + 15]]).toLowerCase();\n}\nconst h = typeof crypto < \"u\" && crypto.randomUUID && crypto.randomUUID.bind(crypto), i = {\n  randomUUID: h\n};\nfunction m(n, t, o) {\n  if (i.randomUUID && !t && !n)\n    return i.randomUUID();\n  n = n || {};\n  const r = n.random || (n.rng || y)();\n  if (r[6] = r[6] & 15 | 64, r[8] = r[8] & 63 | 128, t) {\n    o = o || 0;\n    for (let d = 0; d < 16; ++d)\n      t[o + d] = r[d];\n    return t;\n  }\n  return p(r);\n}\nconst U = () => {\n  const n = m(), o = new TextEncoder().encode(n);\n  return u(o);\n}, l = (n) => {\n  const t = new TextEncoder(), o = typeof n != \"string\" ? JSON.stringify(n) : n, r = t.encode(o);\n  return u(r);\n};\nexport {\n  l as checksum,\n  U as uuid\n};\n//# sourceMappingURL=crypto.js.map\n","import { checksum } from '@dooksa/crypto'\n\nconst TYPES = {\n  Object,\n  Array,\n  Number,\n  Boolean,\n  String\n}\n\n/**\n * Create Adler 32 hex string from object\n * @param {Object} source - The original object used to create the hash\n * @returns {string} - Adler 32 hex string\n */\nconst objectHash = (source) => {\n  try {\n    if (!source) {\n      throw new Error('source is undefined')\n    }\n\n    const target = {}\n\n    sortType(target, source)\n\n    return checksum(target)\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nconst defaultType = (value) => {\n  const name = value?.constructor.name\n\n  return TYPES[name]()\n}\n/**\n * Sort source by data type\n * @private\n * @param {Object} target - Alphanumerically sorted object\n * @param {*} source - Current value\n * @returns\n */\nconst sortType = (target, source) => {\n  if (source == null) {\n    throw new Error('objectHash: value cannot be undefined')\n  }\n\n  if (Array.isArray(source)) {\n    source = array(target, source)\n  } else if (typeof source === 'object') {\n    source = object(target, source)\n  } else if (typeof source === 'function') {\n    source = source.toString()\n  }\n\n  return source\n}\n\n/**\n * Traverse arrays values\n * @param {Object} target - Alphanumerically sorted object\n * @param {Array} source - Current nested array\n * @returns {Array}\n */\nconst array = (target, source) => {\n  // make a copy\n  source = source.slice()\n\n  for (let i = 0; i < source.length; i++) {\n    const value = source[i]\n\n    target = defaultType(value)\n    source[i] = sortType(target, value)\n  }\n\n  return source\n}\n\n/**\n * Sort object keys alphanumerically\n * @private\n * @param {Object} target - Alphanumerically sorted object\n * @param {Object} source - Current nested object\n * @returns {Object}\n */\nconst object = (target, source) => {\n  const keys = Object.keys(source)\n\n  keys.sort()\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n\n    target[key] = defaultType(source[key])\n    target[key] = sortType(target[key], source[key])\n  }\n\n  return target\n}\n\nexport default objectHash\n"],"names":["u","n","o","r","d","s","g","e","TYPES","objectHash","source","target","sortType","checksum","defaultType","value","name","array","object","i","keys","key"],"mappings":"2NAAA,MAAMA,EAAKC,GAAM,CACf,IAAIC,EAAI,EAAGC,EAAI,EACfF,EAAI,IAAI,WAAWA,CAAC,EACpB,QAASG,EAAI,EAAGA,EAAIH,EAAE,OAAQG,IAC5BF,GAAKD,EAAEG,CAAC,EAAGD,GAAKD,EAClB,OAAOA,GAAK,MAAOC,GAAK,MAAOE,GAAGF,GAAK,GAAKD,KAAO,EAAG,CAAC,CACzD,EAAGI,EAAKL,GAAM,CACZ,GAAIA,EAAE,SAAW,EAAG,CAClB,MAAM,EAAIA,EAAE,WAAW,CAAC,EAAGC,EAAID,EAAE,WAAW,CAAC,EAC7C,GAAI,GAAK,OAAS,EAAI,OAASC,GAAK,OAASA,EAAI,MAC/C,OAAQ,EAAI,OAAS,KAAOA,EAAI,MAAQ,MAE5C,OAAOD,EAAE,WAAW,CAAC,CACvB,EAAGI,EAAI,CAACJ,EAAG,EAAI,KAAOA,EAAI,OAAOA,GAAK,SAAWK,EAAEL,CAAC,EAAIA,EAAGA,EAAE,SAAS,EAAE,EAAE,SAAS,EAAG,GAAG,GAQnFM,EAAI,CAAA,EACV,QAASN,EAAI,EAAGA,EAAI,IAAK,EAAEA,EACzBM,EAAE,MAAMN,EAAI,KAAK,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC,EAI9B,OAAO,OAAS,KAAO,OAAO,YAAc,OAAO,WAAW,KAAK,MAAM,EAgB9E,MAGF,EAAKA,GAAM,CACZ,MAAM,EAAI,IAAI,YAAeC,EAAI,OAAOD,GAAK,SAAW,KAAK,UAAUA,CAAC,EAAIA,EAAGE,EAAI,EAAE,OAAOD,CAAC,EAC7F,OAAOF,EAAEG,CAAC,CACZ,EC/CMK,EAAQ,CACZ,OACA,MACA,OACA,QACA,MACF,EAOMC,EAAcC,GAAW,CAC7B,GAAI,CACF,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,qBAAqB,EAGvC,MAAMC,EAAS,CAAE,EAEjB,OAAAC,EAASD,EAAQD,CAAM,EAEhBG,EAASF,CAAM,CACvB,OAAQJ,EAAP,CACA,QAAQ,MAAMA,CAAC,CAChB,CACH,EAEMO,EAAeC,GAAU,CAC7B,MAAMC,EAAOD,GAAA,YAAAA,EAAO,YAAY,KAEhC,OAAOP,EAAMQ,CAAI,EAAG,CACtB,EAQMJ,EAAW,CAACD,EAAQD,IAAW,CACnC,GAAIA,GAAU,KACZ,MAAM,IAAI,MAAM,uCAAuC,EAGzD,OAAI,MAAM,QAAQA,CAAM,EACtBA,EAASO,EAAMN,EAAQD,CAAM,EACpB,OAAOA,GAAW,SAC3BA,EAASQ,EAAOP,EAAQD,CAAM,EACrB,OAAOA,GAAW,aAC3BA,EAASA,EAAO,SAAU,GAGrBA,CACT,EAQMO,EAAQ,CAACN,EAAQD,IAAW,CAEhCA,EAASA,EAAO,MAAO,EAEvB,QAASS,EAAI,EAAGA,EAAIT,EAAO,OAAQS,IAAK,CACtC,MAAMJ,EAAQL,EAAOS,CAAC,EAEtBR,EAASG,EAAYC,CAAK,EAC1BL,EAAOS,CAAC,EAAIP,EAASD,EAAQI,CAAK,EAGpC,OAAOL,CACT,EASMQ,EAAS,CAACP,EAAQD,IAAW,CACjC,MAAMU,EAAO,OAAO,KAAKV,CAAM,EAE/BU,EAAK,KAAM,EAEX,QAASD,EAAI,EAAGA,EAAIC,EAAK,OAAQD,IAAK,CACpC,MAAME,EAAMD,EAAKD,CAAC,EAElBR,EAAOU,CAAG,EAAIP,EAAYJ,EAAOW,CAAG,CAAC,EACrCV,EAAOU,CAAG,EAAIT,EAASD,EAAOU,CAAG,EAAGX,EAAOW,CAAG,CAAC,EAGjD,OAAOV,CACT"}