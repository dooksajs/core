{"version":3,"file":"object-hash.js","sources":["../../crypto/dist/crypto.js","../lib/main.js"],"sourcesContent":["const u = (n) => {\n  let o = 1, r = 0;\n  n = new Uint8Array(n);\n  for (let d = 0; d < n.length; d++)\n    o += n[d], r += o;\n  return o %= 65521, r %= 65521, s((r << 16 | o) >>> 0, 8);\n}, g = (n) => {\n  if (n.length === 2) {\n    const t = n.charCodeAt(0), o = n.charCodeAt(1);\n    if (t >= 55296 && t < 56320 && o >= 56320 && o < 57344)\n      return (t - 55296) * 1024 + o - 56320 + 65536;\n  }\n  return n.charCodeAt(0);\n}, s = (n, t = 2) => (n = typeof n == \"string\" ? g(n) : n, n.toString(16).padStart(t, \"0\"));\nlet c;\nconst x = new Uint8Array(16);\nfunction y() {\n  if (!c && (c = typeof crypto < \"u\" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !c))\n    throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n  return c(x);\n}\nconst e = [];\nfor (let n = 0; n < 256; ++n)\n  e.push((n + 256).toString(16).slice(1));\nfunction p(n, t = 0) {\n  return (e[n[t + 0]] + e[n[t + 1]] + e[n[t + 2]] + e[n[t + 3]] + \"-\" + e[n[t + 4]] + e[n[t + 5]] + \"-\" + e[n[t + 6]] + e[n[t + 7]] + \"-\" + e[n[t + 8]] + e[n[t + 9]] + \"-\" + e[n[t + 10]] + e[n[t + 11]] + e[n[t + 12]] + e[n[t + 13]] + e[n[t + 14]] + e[n[t + 15]]).toLowerCase();\n}\nconst h = typeof crypto < \"u\" && crypto.randomUUID && crypto.randomUUID.bind(crypto), i = {\n  randomUUID: h\n};\nfunction m(n, t, o) {\n  if (i.randomUUID && !t && !n)\n    return i.randomUUID();\n  n = n || {};\n  const r = n.random || (n.rng || y)();\n  if (r[6] = r[6] & 15 | 64, r[8] = r[8] & 63 | 128, t) {\n    o = o || 0;\n    for (let d = 0; d < 16; ++d)\n      t[o + d] = r[d];\n    return t;\n  }\n  return p(r);\n}\nconst U = () => {\n  const n = m(), o = new TextEncoder().encode(n);\n  return u(o);\n}, l = (n) => {\n  const t = new TextEncoder(), o = typeof n != \"string\" ? JSON.stringify(n) : n, r = t.encode(o);\n  return u(r);\n};\nexport {\n  l as checksum,\n  U as uuid\n};\n//# sourceMappingURL=crypto.js.map\n","import { checksum } from '@dooksa/crypto'\n\nconst TYPES = {\n  Object,\n  Array,\n  Number,\n  Boolean,\n  String\n}\n\n/**\n * Create Adler 32 hex string from object\n * @param {Object} source - The original object used to create the hash\n * @returns {string} - Adler 32 hex string\n */\nconst objectHash = (source) => {\n  try {\n    if (!source) {\n      throw new Error('source is undefined')\n    }\n\n    const target = {}\n\n    sortType(target, source)\n\n    return checksum(target)\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nconst defaultType = (value) => {\n  const name = value?.constructor.name\n\n  return TYPES[name]()\n}\n/**\n * Sort source by data type\n * @private\n * @param {Object} target - Alphanumerically sorted object\n * @param {*} source - Current value\n * @returns\n */\nconst sortType = (target, source) => {\n  if (source == null) {\n    throw new Error('objectHash: value cannot be undefined')\n  }\n\n  if (Array.isArray(source)) {\n    source = array(target, source)\n  } else if (typeof source === 'object') {\n    source = object(target, source)\n  } else if (typeof source === 'function') {\n    source = source.toString()\n  }\n\n  return source\n}\n\n/**\n * Traverse arrays values\n * @param {Object} target - Alphanumerically sorted object\n * @param {Array} source - Current nested array\n * @returns {Array}\n */\nconst array = (target, source) => {\n  // make a copy\n  source = source.slice()\n\n  for (let i = 0; i < source.length; i++) {\n    const value = source[i]\n\n    target = defaultType(value)\n    source[i] = sortType(target, value)\n  }\n\n  return source\n}\n\n/**\n * Sort object keys alphanumerically\n * @private\n * @param {Object} target - Alphanumerically sorted object\n * @param {Object} source - Current nested object\n * @returns {Object}\n */\nconst object = (target, source) => {\n  const keys = Object.keys(source)\n\n  keys.sort()\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n\n    target[key] = defaultType(source[key])\n    target[key] = sortType(target[key], source[key])\n  }\n\n  return target\n}\n\nexport default objectHash\n"],"names":["u","o","d","g","e","l","r","TYPES","objectHash","source","target","sortType","checksum","defaultType","value","name","array","object","i","keys","key"],"mappings":"AAAA,MAAMA,IAAI,CAAC,MAAM;AACf,MAAIC,IAAI,GAAG,IAAI;AACf,MAAI,IAAI,WAAW,CAAC;AACpB,WAASC,IAAI,GAAGA,IAAI,EAAE,QAAQA;AAC5B,IAAAD,KAAK,EAAEC,CAAC,GAAG,KAAKD;AAClB,SAAOA,KAAK,OAAO,KAAK,OAAO,GAAG,KAAK,KAAKA,OAAO,GAAG,CAAC;AACzD,GAAGE,IAAI,CAAC,MAAM;AACZ,MAAI,EAAE,WAAW,GAAG;AAClB,UAAM,IAAI,EAAE,WAAW,CAAC,GAAGF,IAAI,EAAE,WAAW,CAAC;AAC7C,QAAI,KAAK,SAAS,IAAI,SAASA,KAAK,SAASA,IAAI;AAC/C,cAAQ,IAAI,SAAS,OAAOA,IAAI,QAAQ;AAAA;AAE5C,SAAO,EAAE,WAAW,CAAC;AACvB,GAAG,IAAI,CAAC,GAAG,IAAI,OAAO,IAAI,OAAO,KAAK,WAAWE,EAAE,CAAC,IAAI,GAAG,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,IAQnFC,IAAI,CAAA;AACV,SAAS,IAAI,GAAG,IAAI,KAAK,EAAE;AACzB,EAAAA,EAAE,MAAM,IAAI,KAAK,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;AAI9B,OAAO,SAAS,OAAO,OAAO,cAAc,OAAO,WAAW,KAAK,MAAM;AAgB9E,MAGFC,IAAI,CAAC,MAAM;AACZ,QAAM,IAAI,IAAI,YAAW,GAAIJ,IAAI,OAAO,KAAK,WAAW,KAAK,UAAU,CAAC,IAAI,GAAGK,IAAI,EAAE,OAAOL,CAAC;AAC7F,SAAOD,EAAEM,CAAC;AACZ,GC/CMC,IAAQ;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAOMC,IAAa,CAACC,MAAW;AAC7B,MAAI;AACF,QAAI,CAACA;AACH,YAAM,IAAI,MAAM,qBAAqB;AAGvC,UAAMC,IAAS,CAAE;AAEjB,WAAAC,EAASD,GAAQD,CAAM,GAEhBG,EAASF,CAAM;AAAA,EACvB,SAAQN,GAAP;AACA,YAAQ,MAAMA,CAAC;AAAA,EAChB;AACH,GAEMS,IAAc,CAACC,MAAU;AAC7B,QAAMC,IAAOD,KAAA,gBAAAA,EAAO,YAAY;AAEhC,SAAOP,EAAMQ,CAAI,EAAG;AACtB,GAQMJ,IAAW,CAACD,GAAQD,MAAW;AACnC,MAAIA,KAAU;AACZ,UAAM,IAAI,MAAM,uCAAuC;AAGzD,SAAI,MAAM,QAAQA,CAAM,IACtBA,IAASO,EAAMN,GAAQD,CAAM,IACpB,OAAOA,KAAW,WAC3BA,IAASQ,EAAOP,GAAQD,CAAM,IACrB,OAAOA,KAAW,eAC3BA,IAASA,EAAO,SAAU,IAGrBA;AACT,GAQMO,IAAQ,CAACN,GAAQD,MAAW;AAEhC,EAAAA,IAASA,EAAO,MAAO;AAEvB,WAASS,IAAI,GAAGA,IAAIT,EAAO,QAAQS,KAAK;AACtC,UAAMJ,IAAQL,EAAOS,CAAC;AAEtB,IAAAR,IAASG,EAAYC,CAAK,GAC1BL,EAAOS,CAAC,IAAIP,EAASD,GAAQI,CAAK;AAAA;AAGpC,SAAOL;AACT,GASMQ,IAAS,CAACP,GAAQD,MAAW;AACjC,QAAMU,IAAO,OAAO,KAAKV,CAAM;AAE/B,EAAAU,EAAK,KAAM;AAEX,WAASD,IAAI,GAAGA,IAAIC,EAAK,QAAQD,KAAK;AACpC,UAAME,IAAMD,EAAKD,CAAC;AAElB,IAAAR,EAAOU,CAAG,IAAIP,EAAYJ,EAAOW,CAAG,CAAC,GACrCV,EAAOU,CAAG,IAAIT,EAASD,EAAOU,CAAG,GAAGX,EAAOW,CAAG,CAAC;AAAA;AAGjD,SAAOV;AACT;"}