{"version":3,"file":"parse-action.js","sources":["../../object-hash/dist/object-hash.js","../lib/main.js"],"sourcesContent":["const i = {\n  Object,\n  Array,\n  Number,\n  Boolean,\n  String\n}, s = {\n  /**\n   * Create Adler 32 hex string from object\n   * @param {Object} source - The original object used to create the hash\n   * @returns {string} - Adler 32 hex string\n   */\n  process(e) {\n    try {\n      if (!e)\n        throw new Error(\"source is undefined\");\n      const t = {};\n      this._sortType(t, e);\n      const n = new TextEncoder(), r = JSON.stringify(t), o = n.encode(r);\n      return this._adler(o);\n    } catch (t) {\n      console.error(t);\n    }\n  },\n  _defaultType(e) {\n    const t = e == null ? void 0 : e.constructor.name;\n    return i[t]();\n  },\n  _adler(e) {\n    let n = 1, r = 0;\n    e = new Uint8Array(e);\n    for (let o = 0; o < e.length; o++)\n      n += e[o], r += n;\n    return n %= 65521, r %= 65521, this._hex((r << 16 | n) >>> 0, 8);\n  },\n  /**\n   * Translates a character into an ordinal.\n   *\n   * @param {char} c\n   * @returns {number}\n   *\n   * @example\n   * // returns 97\n   * this._ord('a');\n   */\n  _ord(e) {\n    if (e.length === 2) {\n      const t = e.charCodeAt(0), n = e.charCodeAt(1);\n      if (t >= 55296 && t < 56320 && n >= 56320 && n < 57344)\n        return (t - 55296) * 1024 + n - 56320 + 65536;\n    }\n    return e.charCodeAt(0);\n  },\n  /**\n   * Converts a character or number to its hex representation.\n   *\n   * @param {char|number} c\n   * @param {number} [length=2] - The width of the resulting hex number.\n   * @returns {string}\n   *\n   * @example\n   * // returns \"6e\"\n   * this._hex(\"n\")\n   *\n   * // returns \"6e\"\n   * this._hex(110)\n   */\n  _hex(e, t = 2) {\n    return e = typeof e == \"string\" ? this._ord(e) : e, e.toString(16).padStart(t, \"0\");\n  },\n  /**\n   * Sort source by data type\n   * @private\n   * @param {Object} target - Alphanumerically sorted object\n   * @param {*} source - Current value\n   * @returns\n   */\n  _sortType(e, t) {\n    if (t == null)\n      throw new Error(\"objectHash: value cannot be undefined\");\n    return Array.isArray(t) ? t = this._array(e, t) : typeof t == \"object\" ? t = this._object(e, t) : typeof t == \"function\" && (t = t.toString()), t;\n  },\n  /**\n   * Traverse arrays values\n   * @param {Object} target - Alphanumerically sorted object\n   * @param {Array} source - Current nested array\n   * @returns {Array}\n   */\n  _array(e, t) {\n    t = t.slice();\n    for (let n = 0; n < t.length; n++) {\n      const r = t[n];\n      e = this._defaultType(r), t[n] = this._sortType(e, r);\n    }\n    return t;\n  },\n  /**\n   * Sort object keys alphanumerically\n   * @private\n   * @param {Object} target - Alphanumerically sorted object\n   * @param {Object} source - Current nested object\n   * @returns {Object}\n   */\n  _object(e, t) {\n    const n = Object.keys(t);\n    n.sort();\n    for (let r = 0; r < n.length; r++) {\n      const o = n[r];\n      e[o] = this._defaultType(t[o]), e[o] = this._sortType(e[o], t[o]);\n    }\n    return e;\n  }\n};\nexport {\n  s as default\n};\n","import objectHash from '@dooksa/object-hash'\n\n/**\n * @typedef {Object} Action\n * @property {Object.<string, ActionItem>} action.items - Collection of actions\n * @property {Object[]} action.sequence - The sequence that will construct the final action\n * @property {string} action.sequence[].id - Reference id to an action item\n * @property {Array.<string>} action.sequence[].path - A list of keys related to the target object that is used to place the returned action value\n */\n\n/**\n * @typedef {Object} ActionItem\n * @property {string} ActionItem._$a - Action name\n * @property {(Object|Array|string|number)} ActionItem._$p - Action parameters\n */\n\n/**\n * Convert template action to dsAction data\n * @param {Object} source\n * @param {string} source.dsAction - The function name\n * @param {(Object|Array|string|number)} source.dsParams - The literal or computed parameters used to pass to the function\n * @returns {Action} - Data that can be used to set dsAction/items and dsAction/sequence\n */\nexport default (source) => {\n  const actions = findActions({ source }).actions\n  const items = {}\n  const sequence = []\n  let children = []\n  let depth = actions[0].path.length\n\n  for (let i = 0; i < actions.length; i++) {\n    const action = actions[i]\n    const id = objectHash.process(action.source)\n    const item = {\n      path: action.path,\n      id\n    }\n    let node = source\n\n    if (depth !== action.path.length) {\n      for (let i = 0; i < children.length; i++) {\n        const childAction = actions[children[i]]\n\n        for (let k = 0; k < action.path.length; k++) {\n          if (action.path[k] !== childAction.path[k]) {\n            children.splice(i, 1)\n            break\n          }\n        }\n      }\n\n      if (children.length) {\n        item.children = children.slice()\n        children = []\n      }\n    }\n\n    // exclude own key\n    const keyLength = action.path.length - 1\n\n    for (let i = 0; i < keyLength; i++) {\n      const key = action.path[i]\n\n      node = node[key]\n    }\n\n    children.push(i)\n    depth = action.path.length\n\n    if (keyLength > -1) {\n      node[action.path[keyLength]] = {\n        _$id: id\n      }\n    }\n\n    sequence.push(item)\n\n    items[id] = action.source\n  }\n\n  const sequenceId = objectHash.process(sequence)\n\n  return { items, sequence, sequenceId }\n}\n\n/**\n * Extract actions from action templates\n * @private\n * @param {Object} param\n * @param {Object} param.source - Action template\n * @returns\n */\nconst findActions = ({\n  source,\n  node = { path: [] },\n  actions = [],\n  lastNode = 0\n}) => {\n  if (source.dsAction) {\n    source._$a = source.dsAction\n    delete source.dsAction\n\n    if (source.dsParams) {\n      source._$p = source.dsParams\n      delete source.dsParams\n    }\n\n    actions.unshift({\n      path: node.path.slice(),\n      source\n    })\n  }\n\n  const keys = Object.keys(source)\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const element = source[key]\n\n    // store current node split â…„\n    if (keys.length > 1) {\n      lastNode = node.path.length\n    }\n\n    if (typeof element === 'object') {\n      node.path.push(key)\n\n      const result = findActions({\n        source: element,\n        node,\n        actions,\n        lastNode\n      })\n\n      // clear keys up until last working node\n      node.path = result.node.path.slice(0, lastNode)\n    }\n  }\n\n  return { actions, node }\n}\n"],"names":["i","s","o","n","r","main","source","actions","findActions","items","sequence","children","depth","action","id","objectHash","item","node","childAction","k","keyLength","key","sequenceId","lastNode","keys","element","result"],"mappings":"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"}